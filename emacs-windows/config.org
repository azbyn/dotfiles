* windows mode define
#+BEGIN_SRC emacs-lisp
    (setq-default azbyn/windows-mode (string-equal system-type "windows-nt"))
        (setq shell-file-name "cmdproxy.exe")
        (setq w32-pass-lwindow-to-system nil
              w32-pass-rwindow-to-system nil
              w32-pass-apps-to-system nil
              w32-lwindow-modifier 'super ;; Left Windows key
              w32-rwindow-modifier 'super ;; Right Windows key
              w32-apps-modifier 'hyper) ;; Menu key
        (w32-register-hot-key [s-])

#+END_SRC
* Theme
** colors
#+BEGIN_SRC emacs-lisp
  (setq-default base16-col-base00 "#1d1f21"
                base16-col-base01 "#282a2e"
                base16-col-base02 "#373b41"
                base16-col-base03 "#7E807E"
                base16-col-base04 "#b4b7b4"
                base16-col-base05 "#c5c8c6"
                base16-col-base06 "#e0e0e0"
                base16-col-base07 "#FFFFFF"
                base16-col-base08 "#CC342B"
                base16-col-base09 "#F96A38"
                base16-col-base0A "#FBA922"
                base16-col-base0B "#198844"
                base16-col-base0C "#1296a5"
                base16-col-base0D "#3971ED"
                base16-col-base0E "#A36AC7"
                base16-col-base0F "#FBA922")
#+END_SRC
** the base16 theme
#+BEGIN_SRC emacs-lisp
    (use-package base16-theme
      :ensure t
      :init
      (setq-default base16-google-dark-colors
                    '(:base00 "#1d1f21"
                      :base01 "#282a2e"
                      :base02 "#373b41"
                      :base03 "#7E807E"
                      :base04 "#b4b7b4"
                      :base05 "#c5c8c6"
                      :base06 "#e0e0e0"
                      :base07 "#FFFFFF"
                      :base08 "#CC342B"
                      :base09 "#F96A38"
                      :base0A "#FBA922"
                      :base0B "#198844"
                      :base0C "#3971ed" ;;:base0C "#318ce7" ;;:base0C "#3971ed"
                      :base0D "#3971ed" ;;:base0D "#12A59C"
                      :base0E "#A36AC7"
                      :base0F "#FBA922"))
      :config
      (setq-default base16-theme-256-color-source "base16-shell")
      (load-theme 'base16-google-dark t)
      (unless (display-graphic-p)
        (set-face-background 'default "unspecified-bg" (selected-frame)))
  )
#+END_SRC

** highlight numbers
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
** highlight escape sequences
#+BEGIN_SRC emacs-lisp
  (use-package highlight-escape-sequences
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'hes-mode)
    (put 'hes-escape-backslash-face 'face-alias 'font-lock-builtin-face)
    (put 'hes-escape-sequence-face 'face-alias 'font-lock-builtin-face))

#+END_SRC
** highlight TODO
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :ensure t)
(global-hl-todo-mode)
#+END_SRC
* Basic packages
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (which-key-mode))
#+END_SRC

** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

** Rainbow
   Preview the color when you encounter a hex code
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :init
      (add-hook 'org-mode-hook 'rainbow-mode)
      (add-hook 'emacs-lisp-mode-hook 'rainbow-mode))
#+END_SRC
** expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("M-s" . er/expand-region)
           ("M-S" . er/contract-region)))
#+END_SRC
** common lisp stuff
#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
#+END_SRC
** find file in project
#+BEGIN_SRC emacs-lisp
(use-package find-file-in-project
  :ensure t
  :config
  (setq-default ffip-ignore-filenames
            (remove "*.d" ffip-ignore-filenames)))
#+END_SRC
** ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :ensure t
    :config
     (ranger-override-dired-mode t))
#+END_SRC
** persp mode todo
#+BEGIN_SRC emacs-lisp
  (use-package persp-mode
    :ensure t)
#+END_SRC
** popwin
no more of ruining an entire window split with some buffers
#+BEGIN_SRC emacs-lisp
(use-package popwin
   :ensure t
   :config
   (popwin-mode 1))

#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (require 'smartparens-config))
  (add-hook 'prog-mode-hook 'smartparens-mode)
#+END_SRC
** htmlize
for org mode conversions
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC
** anzu
   nice replace
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :diminish anzu-mode
    :config
    (global-anzu-mode 1)
    (defun azbyn/anzu-replace-regexp ()
      "no query for me"
      (interactive)
      (anzu--query-replace-common t
                                  ;;:at-cursor t
                                  ;;:thing anzu-replace-at-cursor-thing
                                  :query nil))
    (define-prefix-command 'meta-t-key-map)
    (global-set-key (kbd "M-t") meta-t-key-map)
    (global-set-key (kbd "M-t r") 'anzu-query-replace-regexp)
    (global-set-key (kbd "M-t C-t") 'anzu-query-replace-regexp)
    (global-set-key (kbd "M-t M-t") 'azbyn/anzu-replace-regexp)
    (global-set-key (kbd "M-t q") 'anzu-query-replace)
    (global-set-key (kbd "M-t c") 'anzu-replace-at-cursor-thing))
#+END_SRC
* why not
#+BEGIN_SRC emacs-lisp
(use-package dad-joke
  :ensure t)
#+END_SRC
** mpdel
#+BEGIN_SRC emacs-lisp
  ;; (use-package mpdel
    ;; :ensure t)
  ;; (use-package emms
  ;;   :ensure t
  ;;   :config
  ;;   (require 'emms-setup)
  ;;   (require 'emms-player-mpd)
  ;;   (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
  ;;   (setq emms-seek-seconds 5)
  ;;   (setq emms-player-list '(emms-player-mpd))
  ;;   (setq emms-info-functions '(emms-info-mpd))
  ;;   (setq emms-player-mpd-server-name "localhost")
  ;;   (setq emms-player-mpd-server-port "6600")
  ;;   (emms-player-mpd-connect))
#+END_SRC
* Better defaults
** no scroll bars and stuff
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** no more typing =yes=
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** don't clutter things with backup files
#+BEGIN_SRC emacs-lisp
(defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
(defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
(setq backup-directory-alist (list (cons ".*" backup-dir)))
(setq auto-save-list-file-prefix autosave-dir)
(setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
#+END_SRC

** better scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 999
        scroll-margin 3
        scroll-step 1)
#+END_SRC

** no bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** highlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** lambda becomes Î» among other things
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
  (add-hook 'tex-mode-hook (lambda () (prettify-symbols-mode -1)))
#+END_SRC
** parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)

(use-package rainbow-delimiters
  :ensure t
  :diminish rainbow-delimiters-mode
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

#+END_SRC

** open compressed files
#+BEGIN_SRC emacs-lisp
(auto-compression-mode t)
#+END_SRC
** utf8
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

** line numbers
#+BEGIN_SRC emacs-lisp
  (if (< emacs-major-version 26)
      (defun display-line-numbers-mode()
        (interactive)
        (linum-mode)))
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  ;; (use-package nlinum
  ;;   :ensure t)
  ;; (defun my-nlinum-mode-hook ()
  ;;   (when nlinum-mode
  ;;     (setq-local nlinum-format
  ;;                 (concat " %" (number-to-string
  ;;                              ;; Guesstimate number of buffer lines.
  ;;                              (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
  ;;                         "d"))))
  ;;(add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)
  ;;(defun my-nlinum-mode-hook ()
  ;;  (when nlinum-mode
  ;;   (setq-local nlinum-format
  ;;                (concat " %" (number-to-string
  ;;                             ;; Guesstimate number of buffer lines.
  ;;                             (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))))))

  ;; (add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)

  ;;  (add-hook 'prog-mode-hook 'nlinum-mode)
  ;;  (add-hook 'text-mode-hook 'nlinum-mode)

  ;;(global-display-line-numbers-mode)
#+END_SRC
** disable line numbers for some modes
#+BEGIN_SRC emacs-lisp
;  (defun disable-line-numbers (&optional dummy)
;    (display-line-numbers-mode -1))
;  ;;(add-hook 'neo-tree-mode-hook 'disable-line-numbers)
;  (add-hook 'neo-after-create-hook 'disable-line-numbers)
;  (add-hook 'dashboard-mode-hook 'disable-line-numbers)
;  (add-hook 'dired-mode-hook 'disable-line-numbers)
#+END_SRC
#** electric pairs
#+BEGIN_SRC emacs-lisp
  ;; (setq electric-pair-pairs '(
                             ;; (?\{ . ?\})
                             ;; (?\( . ?\))
                             ;; (?\[ . ?\])
                             ;; (?\" . ?\")
  ;;                            ))
  ;; (  electric-pair-mode t)
#+END_SRC
#** burry, don't kill scratch
# #+BEGIN_SRC emacs-lisp
# (defadvice kill-buffer (around kill-buffer-around-advice activate)
#   (let ((buffer-to-kill (ad-get-arg 0)))
#     (if (equal buffer-to-kill "*scratch*")
#         (bury-buffer)
#       ad-do-it)))
# #+END_SRC
** don't ask about following symlinks
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
** ask for confirmation on close
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
** dired directories first
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-al --group-directories-first")
#+END_SRC
* setup the path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
;;add all subdirs from ~/.emacs.d/lisp/
(let ((default-directory  "~/.emacs.d/lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC
* multi cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    ("H-SPC" . set-rectangular-region-anchor))
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
* rmsbolt - compiler explorer like
#+BEGIN_SRC emacs-lisp
(use-package rmsbolt
  :ensure t)
#+END_SRC
* non-melpa packages
** move line
#+BEGIN_SRC emacs-lisp
(require 'move-lines)
(move-lines-binding)
#+END_SRC
** help plus
#+BEGIN_SRC emacs-lisp
(require 'help-fns+)
#+END_SRC
* Whitespace related stuff
** no tabs
#+BEGIN_SRC emacs-lisp
(set-default 'indent-tabs-mode nil)
(set-default 'indicate-empty-lines t)
#+END_SRC
** show tabs and other whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default whitespace-style '(face
                                   trailing
                                   tabs
                                   ;;spaces
                                   space-before-tab
                                   ;space-after-tab
                                   tab-mark
                                   ;;space-mark
                                   ;;lines-tail
                                   ))
  (defun diminished-whitespace-mode ()
    (interactive)
    (whitespace-mode)
    (diminish 'whitespace-mode))
  (add-hook 'prog-mode-hook 'diminished-whitespace-mode)

  (setq-default whitespace-line-column 180)

#+END_SRC
** 4 space indents
#+BEGIN_SRC emacs-lisp
(setq tab-width 4)
#+END_SRC
* Terminal and eshell
** Use fish by default
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (defadvice ansi-term (before force-bash)
      (interactive (list "/usr/bin/fish")))

    (ad-activate 'ansi-term))
#+END_SRC
** aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'e 'find-file)
  (defalias 'ef 'find-file)
  (defalias 'es 'eshell)
  (defalias 'eo 'find-file-other-window)
#+END_SRC
** xterm color
#+BEGIN_SRC emacs-lisp
  ;; (use-package xterm-color
  ;;   :ensure t
  ;;   :config
  ;;   (require 'eshell) ; or use with-eval-after-load

  ;;   (add-hook 'eshell-before-prompt-hook
  ;;             (lambda ()
  ;;               (setq xterm-color-preserve-properties t)))
  ;;   (unless (boundp 'eshell-output-filter-functions)
  ;;     (defvar eshell-preoutput-filter-functions nil))
  ;;   ;;(add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
  ;;   ;;(setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
  ;;   (setq-default 'eshell-preoutput-filter-functions 'xterm-color-filter)

  ;;   (setq xterm-color-names
  ;;         (vector base16-col-base00 ; black
  ;;          base16-col-base08 ; red
  ;;          base16-col-base0B ; green
  ;;          base16-col-base0A ; yellow
  ;;          base16-col-base0D ; blue
  ;;          base16-col-base0C ; magenta
  ;;          base16-col-base0E ; cyan
  ;;          base16-col-base05 ; white
  ;;          ))
  ;;   (setq xterm-color-names-bright
  ;;         (vector base16-col-base03 ; black
  ;;          base16-col-base08 ; red
  ;;          base16-col-base0B ; green
  ;;          base16-col-base0A ; yellow
  ;;          base16-col-base0D ; blue
  ;;          base16-col-base0E ; magenta
  ;;          base16-col-base0C ; cyan
  ;;          base16-col-base07 ; white
  ;;         ))
  ;;   (setenv "TERM" "xterm-256color")
  ;;   )
#+END_SRC
** fix my bindings
#+BEGIN_SRC emacs-lisp
  (require 'eshell)
  (defun azbyn/eshell-keys()
    (interactive)
    ;;(define-key

     ;;eshell-mode-map (kbd "C-a") nil)
     ;;(define-key eshell-mode-map (kbd "C-e") nil)
     ;;(define-key eshell-mode-map (kbd "C-q") 'eshell-bol)
     (define-key eshell-mode-map (kbd "M-I") 'eshell-previous-input)
     (define-key eshell-mode-map (kbd "M-J") 'eshell-next-input)

     ;;(define-key eshell-mode-map (kbd "M-p") 'eshell-previous-input)
     ;;(define-key eshell-mode-map (kbd "M-n") 'eshell-next-input)
     (local-set-key (kbd "M-r") 'eshell-previous-input)
     (local-set-key (kbd "M-q") 'eshell-next-input)
     (local-set-key (kbd "M-k") (lambda ()
                                  (interactive)
                                  (eshell-bol)
                                  (kill-line)))
    )
  (add-hook 'eshell-mode-hook 'azbyn/eshell-keys)
  (add-hook 'eshell-mode-hook 'company-mode);; auto-complete-mode)
#+END_SRC
** fish completion
#+BEGIN_SRC emacs-lisp
  (use-package fish-completion
    :ensure t
    :config
    (when (and (executable-find "fish")
             (require 'fish-completion nil t))
      (add-hook 'eshell-mode-hook 'fish-completion-mode)))
#+END_SRC
* window numbering
#+BEGIN_SRC emacs-lisp
  (use-package window-numbering
    :ensure t
    :init (window-numbering-mode))
#+END_SRC
* Dashboard
** no more startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** install
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
  ;    (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
      (setq dashboard-items '((recents  . 7)
                              (projects . 5)))
      (setq dashboard-banner-logo-title ""))
#+END_SRC
** show dashboard for new clients
#+BEGIN_SRC emacs-lisp
;;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :init
    (projectile-mode 1))
#+END_SRC
* spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      ;;(setq spaceline-buffer-encoding-abbrev-p nil)
      ;(setq spaceline-line-column-p nil)
      ;(setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (setq spaceline-window-numbers-unicode t)
      (spaceline-toggle-evil-state-off)
      (spaceline-toggle-persp-name-on)
      (spaceline-toggle-window-number-on)
      (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
      (spaceline-spacemacs-theme))
  (unless (display-graphic-p)
    (setq spaceline-window-numbers-unicode nil))

  (spaceline-define-segment azbyn-lines
    "the number of lines"
    (if (eq major-mode 'pdf-view-mode)
        (spaceline--pdfview-page-number)
      (let* ((total-lines (save-excursion
                           (goto-char (point-max))
                           (format-mode-line "%l")))
             (line-num (format-mode-line "%l"))
             (perc (/ (* 100 (string-to-number line-num))
                      (string-to-number total-lines)))
             ;;(col (format-mode-line "%2C")))
             (col (format-mode-line "%2c")))
        (format "%s:%s | %3d%%%%" line-num col perc);; total-lines)
        )))

  (spaceline-compile
    ; left side
    '(((persp-name
        workspace-number
        window-number)
       :fallback evil-state
       :face highlight-face
       :priority 100)
      (anzu :priority 95)
      auto-compile
      ((buffer-modified buffer-size buffer-id remote-host)
       :priority 98)
      (major-mode :priority 79)
      (process :when active)
      ((flycheck-error flycheck-warning flycheck-info)
       :when active
       :priority 89)
      (minor-modes :when active
                   :priority 9)
      (mu4e-alert-segment :when active)
      (erc-track :when active)
      ;;(version-control :when active
      ;;                 :priority 78)
      (org-pomodoro :when active)
      (org-clock :when active)
      nyan-cat)
    ; right side
    '(which-function
      (python-pyvenv :fallback python-pyenv)
      (purpose :priority 94)
      (battery :when active)
      (selection-info :priority 95)
      input-method
      ((buffer-encoding-iabbrev
        point-position
        ;;line-column
        ;;num-lines
        azbyn-lines
        )
       :separator " | "
       :priority 96)
      (global :when active)
      ;;(buffer-position :priority 99)
      ;;(hud :priority 99)
      ))
  ;(setq line-number-mode t)
  ;(setq column-number-mode t
#+END_SRC

* diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (diminish 'whitespace-mode)
    (diminish 'flyspell-mode)
    (diminish 'yas-minor-mode)
    (diminish 'yas-mode)
    (diminish 'eldoc-mode)
    (diminish 'flyspell-mode "s")
    (diminish 'flymake-mode "fm")
    (diminish 'flycheck-mode "fc")
    (diminish 'defining-kbd-macro "Macro"))
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
(unless azbyn/windows-mode
  (use-package magit
    :ensure t))
#+END_SRC
* neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind ("H-t" . 'neotree-toggle))
#+END_SRC
* Org mode
** macro for emacs-lisp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** use the same window for =C-c '=
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** fix my bindings
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-a") nil)
  (define-key org-mode-map (kbd "C-e") nil)
  (define-key org-mode-map (kbd "M-h") nil)
  ;(define-key org-mode-map (kbd "M-e") nil)
#+END_SRC
* Custom functions
** sudo edit
#+BEGIN_SRC emacs-lisp
 (defun sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC
** reload config
#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/config.org at runtime"
  (interactive)
  (save-some-buffers)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))
  (org-babel-load-file (expand-file-name "~/.emacs.d/keybindings.org"))
  )
#+END_SRC
** edit config
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (defun keybindings-visit ()
    (interactive)
    (find-file "~/.emacs.d/keybindings.org"))
  (defun keybindings-visit-readonly ()
    (interactive)
    (find-file-read-only "~/.emacs.d/keybindings.org"))
  (defun config-visit-readonly ()
    (interactive)
    (find-file-read-only "~/.emacs.d/config.org"))
#+END_SRC
** split and follow
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** smarter paste
#+BEGIN_SRC emacs-lisp
  (defun azbyn/paste ()
    (interactive "")
    (let ((el (first kill-ring)))
      (when (cl-search "\n" el)
        (end-of-line)
        (newline))
      (yank)
      (delete-char 1)
      (backward-char)))

  (defun azbyn/paste-before ()
      (interactive "")
      (let ((el (first kill-ring)))
        (when (cl-search "\n" el)
          ;(forward-line -1)
          (beginning-of-line))
        (yank)))
#+END_SRC
** previous buffer
#+BEGIN_SRC emacs-lisp
(defun er-switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC
** kill-whole-word
#+BEGIN_SRC emacs-lisp
(defun daedreth/kill-inner-word ()
  "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1))
#+END_SRC
** word and subword movement
#+BEGIN_SRC emacs-lisp
  (defun azbyn/subword-char-type (c)
    (let ((type (get-char-code-property c 'general-category)))
      (if (member type '(Lu Lt))
          ?U ;;u for uppercase
        (string-to-char (symbol-name type)))))

  (defun azbyn/char-type (c)
    (if (not c)
        ?Z;;z of null
    (if (member c '(?\( ?\)))
        ?\( ;separate category for parens
      ;; can return (the first letter of)
      ;;Letter, Mark, Number, Punctuation, Symbol, Separator, C (other)
      (let ((type (get-char-code-property c 'general-category)))
        ;;make digits and _ behave like letters
        (if (or (equal type 'Nd) (equal c ?_))
            ?L
            (string-to-char (symbol-name type)))))))
  (defun azbyn/elisp-char-type (c)
    (if (member c '(?- ?/))
        ?L ;make - and / a leter
      (azbyn/char-type c)))
  (defvar azbyn/char-type-function 'azbyn/char-type)

  (setq-local azbyn/char-type-function 'azbyn/elisp-char-type)

  ;;TODO add a skip spaces?
  (defun azbyn/word-begin-impl (char-type-fun move-fun get-char-fun)
    (cl-flet ((char-type (c)
                         (cond
                          ((equal c 10) 'newline)
                          (t (funcall char-type-fun c)))))
      (let ((initial-type (char-type (funcall get-char-fun))))
        (if (equal initial-type 'newline)
            (funcall move-fun)
          (unless (equal (funcall get-char-fun) ?\ )
            (while (equal (char-type (funcall get-char-fun)) initial-type)
              (funcall move-fun)))
          (while (equal (funcall get-char-fun) ?\ );;space
            (funcall move-fun))))))

  (defun azbyn/word-end-impl (char-type-fun move-fun get-char-fun)
    (cl-flet ((char-type (c)
                         (cond
                          ((equal c 10) 'newline)
                          (t (funcall char-type-fun c)))))
      (let ((initial-type (char-type (funcall get-char-fun))))
        (while (equal (funcall get-char-fun) ?\ );;space
          (funcall move-fun))
        (if (equal initial-type 'newline)
            (funcall move-fun)
          (unless (equal (funcall get-char-fun) ?\ )
            (while (equal (char-type (funcall get-char-fun)) initial-type)
              (funcall move-fun))
            ;(while (equal (funcall get-char-fun) ?\ );;space
            ;  (funcall move-fun))
            )))))

  (defun azbyn/forward-word-begin ()
    (interactive)
    (azbyn/word-begin-impl azbyn/char-type-function 'forward-char 'char-after))
  (defun azbyn/forward-word-end ()
    (interactive)
    (azbyn/word-end-impl azbyn/char-type-function 'forward-char 'char-after))
  (defun azbyn/backward-word-end ()
    (interactive)
    (azbyn/word-begin-impl azbyn/char-type-function 'backward-char 'char-before))
  (defun azbyn/backward-word-begin ()
    (interactive)
    (azbyn/word-end-impl azbyn/char-type-function 'backward-char 'char-before))

  (defun azbyn/forward-subword-begin ()
    (interactive)
    (when (member (get-char-code-property (char-after) 'general-category)
                  '(Lu Lt))
      (forward-char))
    (azbyn/word-begin-impl 'azbyn/subword-char-type 'forward-char 'char-after))
  (defun azbyn/forward-subword-end ()
    (interactive)
    (when (member (get-char-code-property (char-after) 'general-category)
                  '(Lu Lt))
      (forward-char))
    (azbyn/word-end-impl 'azbyn/subword-char-type 'forward-char 'char-after))
  (defun azbyn/backward-subword-end ()
    (interactive)
    (azbyn/word-begin-impl 'azbyn/subword-char-type 'backward-char 'char-before)
    (when (member (get-char-code-property (char-before) 'general-category)
                  '(Lu Lt))
      (backward-char)))
  (defun azbyn/backward-subword-begin ()
    (interactive)
    (azbyn/word-end-impl 'azbyn/subword-char-type 'backward-char 'char-before)
    (when (member (get-char-code-property (char-before) 'general-category)
                  '(Lu Lt))
      (backward-char)))

  (defun azbyn/delete-one-char ()
    (interactive)
    (delete-char 1))
  (defun azbyn/delete-one-char-backward ()
    (interactive)
    (delete-char -1))

  (defun azbyn/kill-word ()
    (interactive)
    (azbyn/word-end-impl azbyn/char-type-function 'azbyn/delete-one-char 'char-after))
  (defun azbyn/kill-subword ()
    (interactive)
    (when (member (get-char-code-property (char-after) 'general-category)
                  '(Lu Lt))
      (delete-char 1))
    (azbyn/word-end-impl 'azbyn/subword-char-type 'azbyn/delete-one-char 'char-after))

  (defun azbyn/kill-word-backward ()
    (interactive)
    (azbyn/word-end-impl azbyn/char-type-function 'azbyn/delete-one-char-backward 'char-before))
  (defun azbyn/kill-subword-backward ()
    (interactive)
    ;; (when (member (get-char-code-property (char-after) 'general-category)
    ;;               '(Lu Lt))
    ;;   (delete-char 1))
    (azbyn/word-end-impl 'azbyn/subword-char-type 'azbyn/delete-one-char-backward 'char-before))


  (add-hook 'emacs-lisp-mode-hook
            (lambda () (setq-local azbyn/char-type-function 'azbyn/elisp-char-type)))
#+END_SRC
** copy/kill-*-or-region
#+BEGIN_SRC emacs-lisp
  (defun azbyn/copy-to-eol ()
     (interactive)
     (save-excursion
       (kill-new
        (buffer-substring
         (point)
         (point-at-eol))))
     (message "copied to eol"))
   (defun azbyn/copy-to-eol-or-region ()
     (interactive)
     (if mark-active
         (call-interactively 'kill-ring-save)
       (azbyn/copy-to-eol)))

   (defun azbyn/kill-to-eol-or-region ()
     (interactive)
     (if mark-active
         (call-interactively 'kill-region)
       (kill-line)))
   (defun azbyn/kill-whole-line-or-append-region ()
     (interactive)
     (if mark-active
         (call-interactively 'kill-region)
       ;;(append-next-kill) ;;TODO
       (kill-whole-line)))
  (defun azbyn/delete-char-or-region ()
    (interactive)
    (if mark-active
        (call-interactively 'delete-region)
      (delete-char 1)))
#+END_SRC
** copy word
#+BEGIN_SRC emacs-lisp
  (defun azbyn/copy-whole-subword()
    (interactive)
    (save-excursion
      (forward-char)
       (let ((val (buffer-substring
                   (azbyn/get-point 'azbyn/backward-subword-begin)
                   (azbyn/get-point 'azbyn/forward-subword-end))))
         (message "copied %s" val)
         (kill-new val)
         )))
  (defun azbyn/copy-whole-word()
    (interactive)
    (save-excursion
      (forward-char)
      (let ((val (buffer-substring
                   (azbyn/get-point 'azbyn/backward-word-begin)
                   (azbyn/get-point 'azbyn/forward-word-end))))
         (message "copied %s" val)
         (kill-new val)
         )))

  (defun azbyn/kill-whole-word()
    (interactive)
    (forward-char)
    (kill-region (azbyn/get-point 'azbyn/backward-word-begin)
                 (azbyn/get-point 'azbyn/forward-word-end)))

  (defun azbyn/kill-whole-subword()
    (interactive)
    (forward-char)
    (kill-region (azbyn/get-point 'azbyn/backward-subword-begin)
                 (azbyn/get-point 'azbyn/forward-subword-end)))
#+END_SRC
** nicer delete
#+BEGIN_SRC emacs-lisp
  (defun get-deletion-count (arg)
    "Return the amount of spaces to be deleted, ARG is indentation border."
    (if (eq (current-column) 0) 0
      (let ((result (mod (current-column) arg)))
        (if (eq result 0) arg
          result))))

  (defun backspace-some (arg)
    "Deletes some backspaces, ARG unused."
    (interactive "*P")
    (if (use-region-p) (backward-delete-char-untabify 1)
      (let ((here (point)))
        (if (eq 0 (skip-chars-backward " " (- (point) (get-deletion-count 4))))
            (backward-delete-char-untabify 1)
          (delete-region (point) here)))))
  ;;(setq-default indent-tabs-mode t)
  (add-hook 'prog-mode-hook (lambda ()
                              (interactive)
                              (local-set-key [backspace] 'backspace-some)))
  (setq backward-delete-char-untabify-method 'hungry)
  ;(define-key 'multiple-cursors-mode-)
#+END_SRC
*** nicer delete word
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-backspace>") 'azbyn/kill-word-backward)
  (global-set-key (kbd "<C-M-backspace>") 'azbyn/kill-subword-backward)
  (global-set-key (kbd "<M-backspace>") 'azbyn/kill-subword-backward)
#+END_SRC
** transpose args
#+BEGIN_SRC emacs-lisp
  (defun my-c-transpose-args--forward-to-argsep ()
    "Move to the end of the current c function argument.
  Returns point."
    (interactive)
    (while (progn
             (comment-forward most-positive-fixnum)
             (looking-at "[^,)]"))
      (forward-sexp))
    (point))

  (defun my-c-transpose-args--backward-to-argsep ()
    "Move to the beginning of the current c function argument.
  Returns point."
    (interactive)
    (let ((pt (point))
          cur)
      (up-list -1)
      (forward-char)
      (while (progn
               (setq cur (point))
               (> pt (my-c-transpose-args--forward-to-argsep)))
        (forward-char))
      (goto-char cur)))

  (defun my-c-transpose-args--direction (is_forward)
    "Transpose two arguments of a c-function.
  The first arg is the one with point in it."
    (interactive)
    (let* ((pt-original (point)) ;; only different to pt when not 'is_forward'
           (pt (progn
                 (when (not is_forward)
                   (goto-char (- (my-c-transpose-args--backward-to-argsep) 1))
                   (unless (looking-at ",")
                     (goto-char pt-original)
                     (user-error "Argument separator not found")))
                 (point)))
           (b (my-c-transpose-args--backward-to-argsep))
           (sep (progn
                  (goto-char pt)
                  (my-c-transpose-args--forward-to-argsep)))
           (e (progn
                (unless (looking-at ",")
                  (goto-char pt-original)
                  (user-error "Argument separator not found"))
                (forward-char)
                (my-c-transpose-args--forward-to-argsep)))
           (ws-first (buffer-substring-no-properties
                      (goto-char b)
                      (progn
                        (skip-chars-forward "[[:space:]\n]")
                        (point))))
           (first (buffer-substring-no-properties (point) sep))
           (ws-second (buffer-substring-no-properties
                       (goto-char (1+ sep))
                       (progn
                         (skip-chars-forward "[[:space:]\n]")
                         (point))))
           (second (buffer-substring-no-properties (point) e)))

      (delete-region b e)
      (insert ws-first second "," ws-second first)

      ;; Correct the cursor location to be on the same character.
      (if is_forward
          (goto-char
           (+
            ;; word start.
            (- (point) (length first))
            ;; Apply initial offset within the word.
            (- pt b (length ws-first))))
        (goto-char
         (+
          b (length ws-first)
          ;; Apply initial offset within the word.
          (- pt-original (+ pt 1 (length ws-second))))))))

  (defun my-c-transpose-args-forward ()
    (interactive)
    (my-c-transpose-args--direction t))
  (defun my-c-transpose-args-backward ()
    (interactive)
    (my-c-transpose-args--direction nil))
#+END_SRC
* compile
** project finding functions
*** misc
#+BEGIN_SRC emacs-lisp
  (defun azbyn/expand-name (path &optional current-dir)
    (expand-file-name (or (if (file-name-absolute-p path) path)
                          (let ((r-path path))
                            (setq r-path (substitute-in-file-name r-path))
                            (setq r-path (expand-file-name r-path current-dir))
                            r-path))))
  (defun azbyn/updir (path)
    (let ((r-path (azbyn/expand-name path)))
      (if (and (> (length r-path) 0)
               (equal (substring r-path -1) "/"))
          (setq r-path (substring r-path 0 -1)))
      (if (eq (length r-path) 0)
          (setq r-path "/"))
      (directory-file-name
       (file-name-directory r-path))))
  (defun azbyn/project-dir (path)
    "find the first directory with a makefile"
    (if (member path '("/" "/home/azbyn/Projects" "/home/azbyn"))
        path
      (if (member "Makefile" (directory-files path))
          path (azbyn/project-dir (azbyn/updir path)))))
#+END_SRC
*** find root
#+BEGIN_SRC emacs-lisp
  (defun azbyn/find-root (npath)
    (if npath
        (if (file-directory-p npath)
            npath (azbyn/updir npath))
      nil))
#+END_SRC
*** ffip
#+BEGIN_SRC emacs-lisp
  (defun azbyn/ffip ()
    (interactive)
    ;; find-file-in-project doesn't really work for directories with a
    ;; lot of files
    (if (member (azbyn/find-root (buffer-file-name))
                '(nil "/" "/home/azbyn/Projects" "/home/azbyn"))
        (ivy-switch-buffer)
      (progn
        (find-file-in-project)
        ;(insert-char ?/)
        )))
#+END_SRC
** the function
these may be "overridden" in a sense by other modes
like in latex it would be useful to just run "pdflatex whateverfile.tex"
#+BEGIN_SRC emacs-lisp
  (defun azbyn/compile-project-command (path)
      "create a compile command depending on the directory"
      (cond ((member path '("/" "/home/azbyn/Projects" "/home/azbyn")) nil)
            ((member ".dub" (directory-files path))
             (message "dub build --root '%s'" (directory-files path)))
            ((member "Makefile" (directory-files path))
             (concat "make -C '" path "'"))
            (t (azbyn/compile-project-command (azbyn/updir path)))))
  (defvar azbyn/make-file-function 'compile)
  (defun azbyn/make-file ()
    "This function runs azbyn/make-file"
    (interactive)
    (if (called-interactively-p 'any)     ;To call interactively AND to
                                          ;be able to have elisp-calls
        (call-interactively azbyn/make-file-function)
      (apply azbyn/make-file-function)))

  (make-variable-buffer-local 'azbyn/make-file-function)
  (defvar azbyn/make-thing-function
    (lambda ()
      (interactive)
      (save-buffer)
      (let ((cc (azbyn/compile-project-command
                 (azbyn/find-root (buffer-file-name)))))
        (if cc
            (compile cc)
          ;;(message "thing")
          (azbyn/make-file)
          ))))
  (make-variable-buffer-local 'azbyn/make-thing)
  (defun azbyn/run-make-thing ()
    "This function runs azbyn/make-thing"
    (interactive)
    (if (called-interactively-p 'any)     ;To call interactively AND to
                                          ;be able to have elisp-calls
        (call-interactively azbyn/make-thing-function)
      (apply azbyn/make-thing-function)))
#+END_SRC

* Keep the undo tree even after closing emacs
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :init
    (setq undo-limit 78643200)
    (setq undo-outer-limit 104857600)
    (setq undo-strong-limit 157286400)
    (setq undo-tree-mode-lighter " UN")
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-enable-undo-in-region nil)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (add-hook 'undo-tree-visualizer-mode-hook (lambda ()
                                                (undo-tree-visualizer-selection-mode)
                                                (setq display-line-numbers nil)))
    :config
    (global-undo-tree-mode 1))

#+END_SRC
* ivy and counsel mode
** smex for showing recent commands
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t)
#+END_SRC
** actual install
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-height 12)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (defun counsel-M-x-no-init()
      (interactive)
      (counsel-M-x ""))
    (global-set-key (kbd "M-x") 'counsel-M-x-no-init)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    ;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    ;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    ;(global-set-key (kbd "C-c g") 'counsel-git)
    ;(global-set-key (kbd "C-c j") 'counsel-git-grep)
    ;(global-set-key (kbd "C-c k") 'counsel-ag)
    ;(global-set-key (kbd "C-x l") 'counsel-locate)
    ;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    )
  (global-set-key (kbd "C-x C-b") 'counsel-switch-buffer)
#+END_SRC
* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (global-set-key "\C-s" 'swiper))
#+END_SRC
** search previous thing
#+BEGIN_SRC emacs-lisp
  (defun azbyn/swiper-search-previous ()
    (interactive)
    (swiper isearch-string))
  (global-set-key (kbd "C-S-s") 'azbyn/swiper-search-previous)
  (global-set-key (kbd "C-M-s") 'azbyn/swiper-search-previous)

#+END_SRC
* evil mode
Don't really use evil mode the conventional way - I just use it for some nice vim functons like =da{= and other things.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t)
   ;(unless (package-installed-p 'evil)
   ; (package-install 'evil))

  ;; Enable Evil
  ;(require 'evil)
#+END_SRC

** emacs state by default
#+BEGIN_SRC emacs-lisp
(setq-default evil-default-state 'emacs)
#+END_SRC

I don't really want to use vim mode ever, so i bind the switch to something hard to reach.
#+BEGIN_SRC emacs-lisp
  (setq-default evil-toggle-key "H-M-C-s-e")
#+END_SRC
** disable some keybindings
#+BEGIN_SRC emacs-lisp
  (define-key evil-visual-state-map (kbd "C-w") nil)
  (define-key evil-motion-state-map (kbd "C-w") nil)
  (define-key evil-emacs-state-map  (kbd "C-z") nil)
  (define-key evil-motion-state-map (kbd "C-z") nil)
  (define-key evil-motion-state-map (kbd "C-b") nil)
  (define-key evil-motion-state-map (kbd "C-f") nil)
  (define-key evil-motion-state-map (kbd "C-o") nil)
  (define-key evil-motion-state-map (kbd "C-e") nil)
  (define-key evil-motion-state-map (kbd "C-y") nil)
  (define-key evil-motion-state-map (kbd "C-i") nil)
  (define-key evil-motion-state-map (kbd "C-u") nil)
  (define-key evil-motion-state-map (kbd "C-d") nil)
  ;;don't start eshell and others in insert mode
  (setq-default evil-insert-state-modes nil)
#+END_SRC

** a nice cursor
#+BEGIN_SRC emacs-lisp
  (setq-default evil-emacs-state-cursor '("#FBA923" box))
  (blink-cursor-mode 0)
#+END_SRC

** finaly enable evil
#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
#+END_SRC
* company mode
also use =C-n=, =C-p= for movement
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :diminish company-mode
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2) ;; so we can enter // comments
      (setq company-selection-wrap-around t)
      (setq company-require-match nil)
      ;(company-tng-configure-default)
  )
    (with-eval-after-load 'company
      (setq company-backends (cons 'company-files
                                   (remove 'company-files company-backends)))
      (define-key company-active-map [escape] 'company-abort)
      (define-key company-active-map (kbd "C-h") nil)
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map [C-j] 'company-select-next)
      (define-key company-active-map [C-i] 'company-select-previous)
      (define-key company-active-map (kbd "RET") 'company-complete-selection)
        ;(define-key company-active-map (kbd "SPC") #'company-abort)
      (define-key company-active-map (kbd "SPC") nil)
      )
#+END_SRC
* smartrep
#+BEGIN_SRC emacs-lisp
  (use-package smartrep
    :ensure t
    :config
    (smartrep-define-key
        global-map "C-x"
        '(("<left>" .  previous-buffer)
          ("<right>" . next-buffer))))
#+END_SRC
* winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
  (smartrep-define-key
      winner-mode-map "C-c"
      '(("<left>" . winner-undo)
        ("<right>" . winner-redo)))
#+END_SRC
* flyspell
#+BEGIN_SRC emacs-lisp
  ;;(add-hook 'prog-mode-hook 'flyspell-prog-mode)
  ;;(define-key flyspell-mode-map (kbd "C-;") nil)
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (smartrep-define-key
        flycheck-mode-map "M-g"
      '(
        ("n" . flycheck-next-error)
        ("p" . flycheck-previous-error)

        ("j" . flycheck-next-error)
        ("i" . flycheck-previous-error)

        ("<C-j>" . flycheck-next-error)
        ("<C-i>" . flycheck-previous-error)
  )))

    (smartrep-define-key
       global-map "M-g"
      '(
        ("n" . next-error)
        ("p" . previous-error)

        ("j" . next-error)
        ("i" . previous-error)

        ("<C-j>" . next-error)
        ("<C-i>" . previous-error)))
#+END_SRC
* dropdown-window emacs mode
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (load "server")
    (unless (server-running-p) (server-start))
    ;; (
    (defun dropdown-mode ()
      ;;(setq frame-title-format '("QuakeDD_emacs"))
      ;;(setq frame-title-format "QuakeDD_emacs")
      ;;(set-frame-parameter nil 'alpha 95)

      ;;(set-face-attribute 'default nil
      ;;                    :height 117)
      )
    )
#+END_SRC
* programming languages config
** common
#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "M-m") 'yas-expand)
  (setq compilation-scroll-output t)
#+END_SRC
** c-style
#+BEGIN_SRC emacs-lisp
    (diminish 'company-dcd-mode)
     (diminish 'company-dcd-mode)
   (c-add-style "my-style"
               '("stroustrup"
                 (c-basic-offset . 4)
                 (indent-tabs-mode . nil)
                 (c-offsets-alist
                  (inlambda . 0) ; no extra indent for lambda
                  ;; (member-init-intro . '++)
                  (member-init-intro . 8)
                  (innamespace . -))))

  (push '(other . "my-style") c-default-style)
#+END_SRC
** elisp
#+BEGIN_SRC emacs-lisp
  (define-key emacs-lisp-mode-map (kbd "M-q") 'backward-sexp)
  (define-key emacs-lisp-mode-map (kbd "M-r") 'forward-sexp)
  ;(add-hook 'emacs-lisp-mode-hook 'semantic-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
  (add-hook 'emacs-lisp-mode-hook (lambda ()
                                    (interactive)
                                    (flycheck-mode)
                                    ;(with-eval-after-load 'flycheck
                                    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))
                                    (setq-local azbyn/make-thing-function 'eval-last-sexp)))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '(
                               (C . t)
                               (octave . t)))
  (setq org-confirm-babel-evaluate nil)
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local azbyn/make-thing-function 'org-latex-export-to-pdf)))

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
** ptry
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (require 'poetry-mode)
    (add-hook 'poetry-mode-hook 'display-line-numbers-mode))
#+END_SRC
** dlang
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package d-mode
      :ensure t)

    (use-package company-dcd
      :ensure t
      :diminish abbrev-mode
      :diminish company-dcd-mode)

    (add-hook 'd-mode-hook 'company-dcd-mode)
    (add-hook 'd-mode-hook 'flycheck-mode)
    (add-hook 'd-mode-hook (lambda ()
                             (setq azbyn/goto-definition-function
                                   'company-dcd-goto-definition)
                             (setq azbyn/search-symbol-function
                                   'company-dcd-ivy-search-symbol))))
  ;;add ddoc (ie =C-c ?= now) to some keybinding?
#+END_SRC
** rust
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package rust-mode
      :ensure t)
    (use-package company-racer
      :ensure t)
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'company-racer)))
#+END_SRC
** lua
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package lua-mode
      :ensure t
      :defer 1
      )
    ;; (use-package lua-mode
    ;;   :ensure t)
    ;; (setq lua-indent-size 4)
    (add-hook 'lua-mode-hook 'company-mode)
    (add-hook 'lua-mode-hook 'flycheck-mode))
#+END_SRC
** fish
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package fish-mode
      :ensure t))
#+END_SRC

** xmodmap
#+BEGIN_SRC emacs-lisp
 (define-generic-mode 'xmodmap-mode
      '(?!)
      '("add" "clear" "keycode" "keysym" "pointer" "remove")
      nil
      '("[xX]modmap\\(rc\\)?\\'")
      nil
      "Simple mode for xmodmap files.")
#+END_SRC
** nasm
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package nasm-mode
      :ensure t
      :config
      (setq nasm-basic-offset 4)
      (define-key nasm-mode-map (kbd ";") nil)
      (add-to-list 'auto-mode-alist '("\\.asm\\'" . nasm-mode))
      (add-hook 'nasm-mode-hook 'company-mode)
      ))

#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :ensure t
    :config
      (require 'company)
      (add-to-list 'company-backends 'company-jedi))
  (use-package jedi
     :ensure t)

  (add-hook 'python-mode-hook 'flycheck-mode)
  (add-hook 'python-mode-hook 'company-mode)
  (add-hook 'python-mode-hook 'jedi-mode)
  ;;(add-hook 'python-mode-hook 'jedi:setup)
  (setq python-scripts-path "C:\\Users\\azbyn\\AppData\\Local\\Programs\\Python\\Python37\\Scripts\\")
  (setq python-environment-virtualenv (list (concat python-scripts-path "virtualenv.exe")))
  (setq python-shell-interpreter (concat python-scripts-path "ipython.exe"))
  (use-package elpy
    :ensure t
    :diminish elpy-mode
    :init
    (setq elpy-modules '(elpy-module-sane-defaults
                         elpy-module-company
                         elpy-module-eldoc
                         elpy-module-flymake
                         ;elpy-module-highlight-indentation
                        ; elpy-module-pyvenv
                         elpy-module-yasnippet
                         ;elpy-module-django
                         ))
    (elpy-enable)
    ;;(add-hook 'python-mode-hook 'company-mode)
    )
  (define-key inferior-python-mode-map (kbd "M-I") 'comint-previous-input)
  (define-key inferior-python-mode-map (kbd "M-r") 'comint-previous-input)
  (define-key inferior-python-mode-map (kbd "M-J") 'comint-next-input)
  (define-key inferior-python-mode-map (kbd "M-q") 'comint-next-input)

  (defun azbyn/python-eval-stmt()
    (interactive)
    (if mark-active
        (elpy-shell-send-region-or-buffer)
      (elpy-shell-send-statement)))

  (define-key elpy-mode-map (kbd "<C-return>") 'azbyn/python-eval-stmt)
  (define-key elpy-mode-map (kbd "<M-return>") 'elpy-shell-send-defun)
  (define-key elpy-mode-map (kbd "<M-S-return>") 'elpy-shell-send-defclass)
  (define-key elpy-mode-map (kbd "<C-S-return>") 'elpy-shell-send-defclass)


  ;;(setq python-shell-interpreter "jupyter"
  ;    python-shell-interpreter-args "console --simple-prompt"
  ;    python-shell-prompt-detect-failure-warning nil)
  ;(add-to-list 'python-shell-completion-native-disabled-interpreters
  ;           "jupyter")
  (setq ;;python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt")

  (setq python-indent-guess-indent-offset t)
  (setq python-indent-guess-indent-offset-verbose nil)
  (diminish 'compilation-shell-minor-mode)

  (setq-default python-indent-offset 4)
  (add-hook 'python-mode-hook
            (lambda ()
              (local-set-key (kbd "M-c") (lambda () (interactive) (compile (format "py \"%s\"" (buffer-file-name)))))
              ;; 'elpy-shell-send-buffer)

              (setq azbyn/goto-definition-function
                    'jedi:goto-definition)
              (setq azbyn/search-symbol-function
                  'elpy-rgrep-symbol)
              (setq azbyn/repl-name "*Python*")))


#+END_SRC
** c++
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package irony
      :diminish irony-mode
      :ensure t)
    ;;#define breaks
    (add-hook 'c-mode-hook (lambda () (rainbow-mode -1)))

    ;;i don't like autopairing  for this
    (sp-local-pair '(c-mode c++-mode) "/*" nil :actions :rem)
    (add-hook 'c++-mode-hook (lambda ()
                               (setq flycheck-clang-language-standard "c++20")))

    ;;(add-hook 'c++-mode-hook 'semantic-mode)
    ;;(add-hook 'c-mode-hook 'semantic-mode)

    (add-hook 'c-mode-hook 'azbyn/remove-sp)
    (add-hook 'c-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'flycheck-mode)

    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (add-hook 'c++-mode-hook 'irony-mode)

    ;;i don't like having /* autocompleted
                                          ;(define-key c++-mode-map (kbd "*") nil)


    (with-eval-after-load "flycheck"
      (setq flycheck-clang-warnings `(,@flycheck-clang-warnings
                                      "no-pragma-once-outside-header")))
    (with-eval-after-load 'flycheck
      (setq-default flycheck-disabled-checkers
                    '(c/c++-cppcheck c/c++-gcc)))
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode)))
#+END_SRC
** java
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package lsp-mode
      :ensure t
      :init
      (setq lsp-prefer-flymake nil)
      :demand t
      :after jmi-init-platform-paths)

    (use-package lsp-ui
      :ensure t
      :config
      (setq lsp-ui-doc-enable nil
            lsp-ui-sideline-enable nil
            lsp-ui-flycheck-enable t)
      :after lsp-mode)

    (use-package dap-mode
      :ensure t
      :config
      (dap-mode t)
      (dap-ui-mode t))
    (defun azbyn/java-mode-config ()
      (setq-local tab-width 4
                  c-basic-offset 4)
      (toggle-truncate-lines 1)
      (setq-local tab-width 4)
      (setq-local c-basic-offset 4)
      (company-mode)
      (flycheck-mode)
      (yas-minor-mode)
      (lsp))
    (add-hook 'java-mode-hook 'azbyn/java-mode-config)
    (use-package lsp-java
      :ensure t

      :config
      ;; Enable dap-java
      (require 'dap-java)

      ;; Support Lombok in our projects, among other things
      ;; (setq lsp-java-vmargs
      ;;       (list "-noverify"
      ;;             "-Xmx2G"
      ;;             "-XX:+UseG1GC"
      ;;             "-XX:+UseStringDeduplication"
      ;;             (concat "-javaagent:" jmi/lombok-jar)
      ;;             (concat "-Xbootclasspath/a:" jmi/lombok-jar))
      ;;       lsp-file-watch-ignored
      ;;       '(".idea" ".ensime_cache" ".eunit" "node_modules"
      ;;         ".git" ".hg" ".fslckout" "_FOSSIL_"
      ;;         ".bzr" "_darcs" ".tox" ".svn" ".stack-work"
      ;;         "build")

      ;;       lsp-java-import-order '["" "java" "javax" "#"]
      ;;       ;; Don't organize imports on save
      ;;       lsp-java-save-action-organize-imports nil

      ;;       ;; Formatter profile
      ;;       lsp-java-format-settings-url
      ;;       (concat "file://" jmi/java-format-settings-file))


      :demand t
      :after (lsp lsp-mode dap-mode jmi-init-platform-paths))
    )
#+END_SRC
** haskell
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package haskell-mode
      :ensure t)
    (add-hook 'haskell-mode-hook 'company-mode)
    (add-hook 'haskell-mode-hook 'flycheck-mode))
#+END_SRC
* eaf
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package eaf
      :load-path "/usr/share/emacs/site-lisp/eaf"
      :custom
      (eaf-find-alternate-file-in-dired t)
      :config
      (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
      (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
      ;;(eaf-bind-key take_photo "p" eaf-camera-keybinding)

      (eaf-bind-key yank_text "C-v" eaf-browser-keybinding)
      (eaf-bind-key yank_text "C-p" eaf-browser-keybinding)

      (eaf-bind-key copy_text "C-l" eaf-browser-keybinding)
      (eaf-bind-key kill_text "C-k" eaf-browser-keybinding)


      (eaf-bind-key undo_action "M-u" eaf-browser-keybinding)
      (eaf-bind-key redo_action "M-h" eaf-browser-keybinding)
      (eaf-bind-key redo_action "M-U" eaf-browser-keybinding)


      (eaf-bind-key open_link "C-o" eaf-browser-keybinding)
      (eaf-bind-key other-window "M-o" eaf-browser-keybinding)
      (eaf-bind-key caret_clear_search "M-c" eaf-browser-keybinding)


      (eaf-bind-key history_backward "M-a" eaf-browser-keybinding)
      (eaf-bind-key history_forward "M-f" eaf-browser-keybinding)

      (eaf-bind-key history_backward "M-A" eaf-browser-keybinding)
      (eaf-bind-key history_forward "M-F" eaf-browser-keybinding)
      (eaf-bind-key insert_or_scroll_down "i" eaf-browser-keybinding)

      (eaf-bind-key scroll_left "C-a" eaf-browser-keybinding)
      (eaf-bind-key scroll_right "C-f" eaf-browser-keybinding)
      (eaf-bind-key scroll_down "<C-i>" eaf-browser-keybinding)
      (eaf-bind-key scroll_up "<C-j>" eaf-browser-keybinding)
                                          ;
      (eaf-bind-key scroll_down_page "M-i" eaf-browser-keybinding)
      (eaf-bind-key scroll_up_page "M-j" eaf-browser-keybinding)


                                          ;(eaf-setq eaf-browser-enable-plugin "false")
                                          ;(eaf-setq eaf-browser-enable-javascript "false")
      (eaf-setq eaf-browser-dark-mode "true"))

                                          ;(eaf-open-external)

    (add-hook 'eaf-mode-hook
              (lambda () (interactive)
                (define-key eaf-mode-map (kbd "M-o") nil)
                (define-key eaf-mode-map [f13] 'eshell);so we don't override the bindings

                                          ;(define-key eaf-mode-map [C-i] 'eaf-proxy-scroll_down)
                                          ;(define-key eaf-mode-map [C-j] 'eaf-proxy-scroll_up)

                ;; (define-key eaf-mode-map (kbd "SPC") 'eaf-send-key-sequence)
                ;; (define-key eaf-mode-map (kbd "C-a") 'eaf-send-key-sequence)
                ;; (define-key eaf-mode-map (kbd "C-e") 'eaf-send-key-sequence)
                ;; (define-key eaf-mode-map (kbd "<S-left>") 'eaf-send-key-sequence)
                ;; (define-key eaf-mode-map (kbd "<S-right>") 'eaf-send-key-sequence)
                ;; (define-key eaf-mode-map (kbd "<C-left>") 'eaf-send-key-sequence)
                ;; (define-key eaf-mode-map (kbd "<C-right>") 'eaf-send-key-sequence)
                ;; ;;(define-key eaf-mode-map (kbd "<C-S-left>") 'eaf-send-key)
                ;; ;;(define-key eaf-mode-map (kbd "<C-S-right>") 'eaf-send-key)
                ;; (define-key eaf-mode-map (kbd "C-k") 'eaf-send-key-sequence)
                ;; ;;(define-key eaf-mode-map (kbd "C-l") 'eaf-proxy-open_link)
                (define-key eaf-mode-map (kbd "C-c e") nil)
                (define-key eaf-mode-map (kbd "C-c C-e") 'eaf-open-bookmark)
                ;;(centaur-tabs-local-mode 1)
                ;;(centaur-tabs--button-ensure-selected-tab-is-visible)
                )))
#+END_SRC
** make default emacs browser
#+BEGIN_SRC emacs-lisp
  ;;(unless azbyn/windows-mode
  ;;  (setq browse-url-browser-function 'eaf-open-browser)
  ;;  (defalias 'browse-web #'eaf-open-browser))
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (setq eaf-browser-search-engines
          '(("ddg-html" . "https://html.duckduckgo.com/html/?q=%s")
            ("ddg-full" . "https://duckduckgo.com/?q=%s")))
    (setq eaf-browser-default-search-engine "ddg-html")
    (eaf-setq eaf-browser-enable-adblocker "true")
    (eaf-setq eaf-browse-blank-page-url "https://duckduckgo.com")
    (eaf-setq eaf-browser-default-zoom "1.25"))
#+END_SRC
** bindings
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (global-set-key (kbd "H-?") 'eaf-search-it))
    ;;(global-set-hyper-key "h" 'eaf-open-browser-with-history)
#+END_SRC
* todo
fix compile

